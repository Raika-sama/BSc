Setup Ambiente di Test
Progetto: Brain-Scanner (BSc)
Data: 2025-01-05
Author: Raika-sama

1️⃣ Installazione Dipendenze
Prima di tutto, installiamo le dipendenze necessarie per il testing:

bash
# Installa Jest e relative dipendenze
npm install --save-dev jest @types/jest

# Installa supertest per testing HTTP
npm install --save-dev supertest

# Installa mongodb-memory-server per database di test
npm install --save-dev mongodb-memory-server

# Installa altre utilità
npm install --save-dev cross-env
2️⃣ Configurazione File
1. Package.json
Aggiungi questi script:

JSON
{
  "scripts": {
    "test": "cross-env NODE_ENV=test jest --detectOpenHandles",
    "test:watch": "cross-env NODE_ENV=test jest --watch",
    "test:coverage": "cross-env NODE_ENV=test jest --coverage"
  }
}
2. Jest Configuration
Crea jest.config.js nella root del progetto:

JavaScript
// jest.config.js

module.exports = {
    testEnvironment: 'node',
    verbose: true,
    collectCoverage: true,
    coverageDirectory: 'coverage',
    coverageReporters: ['text', 'lcov', 'clover'],
    testMatch: ['**/__tests__/**/*.js', '**/?(*.)+(spec|test).js'],
    setupFilesAfterEnv: ['<rootDir>/tests/setup.js'],
    testPathIgnorePatterns: ['/node_modules/'],
    coveragePathIgnorePatterns: ['/node_modules/'],
    globals: {
        'NODE_ENV': 'test'
    }
};
3. Test Setup
Crea tests/setup.js:

JavaScript
// tests/setup.js

const mongoose = require('mongoose');
const { MongoMemoryServer } = require('mongodb-memory-server');
const logger = require('../src/utils/logger/logger');

// Disabilita logging durante i test
logger.silent = true;

let mongod;

// Setup prima di tutti i test
beforeAll(async () => {
    mongod = await MongoMemoryServer.create();
    const uri = mongod.getUri();
    await mongoose.connect(uri, {
        useNewUrlParser: true,
        useUnifiedTopology: true
    });
});

// Pulisci il database dopo ogni test
afterEach(async () => {
    const collections = mongoose.connection.collections;
    for (const key in collections) {
        const collection = collections[key];
        await collection.deleteMany();
    }
});

// Chiudi connessione dopo tutti i test
afterAll(async () => {
    await mongoose.connection.close();
    await mongod.stop();
});

// Setup globale timeout
jest.setTimeout(30000);
4. Test Environment
Crea .env.test:

env
NODE_ENV=test
JWT_SECRET=super-secret-test-key
JWT_EXPIRES_IN=1h
PORT=5001
3️⃣ Struttura Cartelle Test
mkdir -p tests/{unit,integration,e2e}/{controllers,repositories,middleware,utils}
Crea questa struttura:

Code
tests/
├── setup.js
├── fixtures/              # Test data
│   └── users.js
├── unit/
│   ├── controllers/
│   │   └── auth.test.js
│   ├── repositories/
│   │   └── user.test.js
│   └── middleware/
│       └── auth.test.js
├── integration/
│   ├── auth/
│   │   └── authentication.test.js
│   └── users/
│       └── user-management.test.js
└── e2e/
    └── flows/
        └── user-journey.test.js
5. Test Utils
Crea tests/utils/test-utils.js:

JavaScript
// tests/utils/test-utils.js

const jwt = require('jsonwebtoken');
const config = require('../../src/config/config');
const { UserRepository } = require('../../src/repositories');

const userRepository = new UserRepository();

/**
 * Crea un token JWT per i test
 */
const generateTestToken = (userId) => {
    return jwt.sign({ id: userId }, config.jwt.secret, {
        expiresIn: config.jwt.expiresIn
    });
};

/**
 * Crea un utente di test
 */
const createTestUser = async (userData = {}) => {
    const defaultUser = {
        firstName: 'Test',
        lastName: 'User',
        email: `test${Date.now()}@example.com`,
        password: 'Password123!',
        role: 'teacher'
    };

    const user = await userRepository.createUser({
        ...defaultUser,
        ...userData
    });

    return user;
};

module.exports = {
    generateTestToken,
    createTestUser
};
4️⃣ Verifica Setup
Crea un test semplice per verificare che tutto funzioni:

JavaScript
// tests/unit/sample.test.js

describe('Sample Test', () => {
    it('should pass', () => {
        expect(true).toBe(true);
    });
});
Esegui:

npm test
